package lab05;

public class BinarySearchSet {
	/** represent the simple array that holds the list values */
	public double[] storage;
	/** holds the length of the storage array */
	private int capacity;
	/** holds the number of elements in the list */
	private int size;

	/** keep this TRUE for lab **/
	public boolean labFind = true;

	/** default constructor */
	public BinarySearchSet(){
		storage = new double[6];
		capacity = 6;
		size = 0;
	}

	public BinarySearchSet(double[] input){
		// TODO (for assignment, not lab)
	}
	public boolean isEmpty(){
		for(int i = 0; i < storage.length; i++) {
			if(storage[i] != 0) {
				return false;
			}
		}
		return true; //placeholder
	}

	public int size(){
		return size; //placeholder
	}

	public void grow(){
		double growArray[] = new double[capacity*2];
	    System.out.println(storage.length);
	    System.arraycopy(storage, 0, growArray, 0, capacity);
	    capacity *= 2;
	    storage = growArray;
	    System.out.println(storage.length);
		// TODO
	}

	public String toString(){
		// TODO
		return null; // placeholder
	}

	public void clear() {
		// TODO
	}

	public boolean insert(double newVal){
		// TODO
		return false;
	}

	public boolean remove(double element){
		// TODO
		return false; // placeholder
	}


	private int sequentialFind(double target) {
		// TODO
		return 0; //placeholder
	}

	private int binaryFind(double target) {
		// TODO
		return 0; // placeholder
	}

	public int findIndex(double target) {
		if (labFind) {
			return sequentialFind(target);
		} else {
			return binaryFind(target);
		}
	}

	public boolean containsAll(double[] elements){
		// TODO
		return false; // placeholder
	}

	public boolean contains(double element){
		// TODO
		return false; // placeholder
	}

}
